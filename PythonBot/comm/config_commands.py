import discord
from discord.ext import commands
import constants
from database import general as dbcon


class Config:
    def __init__(self, my_bot):
        self.bot = my_bot
        print('Config started')

    @commands.command(pass_context=1, help="Toggle whether commands will be deleted here",
                      aliases=['tdc'])
    async def toggledeletecommands(self, ctx):
        if not await self.bot.pre_command(message=ctx.message, command='toggledeletecommands', cannot_be_private=True):
            return
        perms = ctx.message.channel.permissions_for(ctx.message.author)
        if not ((
                        ctx.message.author.id == constants.NYAid) or perms.manage_channels or perms.manage_messages or perms.administrator):
            await self.bot.say("Hahahaha, no")
            return

        dbcon.toggle_delete_commands(ctx.message.server.id)

        if dbcon.get_delete_commands(ctx.message.server.id):
            await self.bot.say('Commands will now be deleted in this server')
        else:
            await self.bot.say('Commands will now not be deleted in this server')

    @commands.command(pass_context=1, help="Toggle whether a specific commands can be used here", aliases=['tc'])
    async def togglecommand(self, ctx, *args):
        if not await self.bot.pre_command(message=ctx.message, command='togglecommand', cannot_be_private=True):
            return
        perms = ctx.message.channel.permissions_for(ctx.message.author)
        if not (
                ctx.message.author.id == constants.NYAid or perms.manage_channels or perms.manage_messages or perms.administrator):
            await self.bot.say("Hahahaha, no")
            return
        # Names for responses generated by the general message handler
        response_names = ['\\o/', 'ayy', 'response_lenny', 'response_ded', 'tableflip', 'talk']
        if len(args) <= 0:
            await self.bot.say(
                'The response commands are (un)banned with either of {}'.format(', '.join(response_names)))
            return
        if len(args) <= 1 or not (args[0].lower() in ['server', 'channel']):
            await self.bot.say('Please give me either "server" or "channel" followed by the name of the command')
            return

        # Find if command exists and convert possible aliases
        if args[1] == 'all':
            name = 'all'
            text = 'All commands'
        elif args[1] in response_names:
            name = args[1]
            text = 'Response "{}"'.format(name)
        else:
            comm = self.bot
            try:
                for name in args[1:]:
                    comm = comm.commands.get(name)
            except AttributeError:
                await self.bot.say('I do not recognize that command name. Maybe you used an alias?')
                return
            name = comm.name
            text = 'Command "{}" is'.format(name)

        # Check whether to ban locally or globally
        id_type = args[0].lower()
        identifier = ctx.message.server.id if id_type == 'server' else ctx.message.channel.id

        # Add or remove command
        if name == 'togglecommand':
            await self.bot.say('Wow... just wow')
            return
        result = dbcon.toggle_banned_command(id_type, identifier, name)
        if not result:
            await self.bot.say('{} now unbanned from this {}'.format(text, args[0]))
        else:
            await self.bot.say('{} now banned from this {}'.format(text, args[0]))

    @commands.command(pass_context=1, help="Change my prefix", aliases=['setprefix', 'changeprefix'])
    async def prefix(self, ctx, *args):
        c = [discord.Permissions.administrator, discord.Permissions.manage_server, discord.Permissions.manage_channels]
        if not await self.bot.pre_command(message=ctx.message, command='prefix', cannot_be_private=True, checks=c):
            return

        if not (0 < len(args) <= 10):
            await self.bot.say('My prefix has to be between 1 and 10 characters')
            return

        dbcon.set_prefix(ctx.message.server.id, ' '.join(args))
        await self.bot.say('The prefix for this server is now \'{}\''.format(await self.bot._get_prefix(ctx.message)))

    @commands.command(pass_context=1, help="Change my prefix", aliases=['star'])
    async def starboard(self, ctx, *args):
        c = [discord.Permissions.administrator, discord.Permissions.manage_server, discord.Permissions.manage_channels]
        if not await self.bot.pre_command(message=ctx.message, command='starboard', cannot_be_private=True, checks=c):
            return

        dbcon.set_star_channel(ctx.message.server.id, ctx.message.channel.id)

        await self.bot.say('React with â˜… to see your messages get saved in this channel')
